generator client {
  provider = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  phone         String?
  description   String?
  accounts      Account[]
  sessions      Session[]


  conversations ConversationOnUser[]
  seenMessages  MessageSeen[]
  messages      Message[]

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Conversation {
  id             String   @id @default(cuid())
  name           String?
  lastMessagesAt DateTime @default(now())
  isGroup        Boolean?

  messages Message[]
  users    ConversationOnUser[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id             String       @id @default(cuid())
  body           String?
  image          String?
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  senderId String
  sender   User   @relation(fields: [senderId], references: [id], onDelete: Cascade)

  seen MessageSeen[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ConversationOnUser {
  conversationId String
  userId         String

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@id([userId, conversationId])
}

model MessageSeen {
  messageId String
  userId    String

  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([messageId, userId])
}
